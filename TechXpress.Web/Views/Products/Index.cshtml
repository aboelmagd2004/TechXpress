@model TechXpress.Web.ViewModels.Products.ProductIndexViewModel

@{
    ViewData["Title"] = "Products";
}

    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="/">
                    <i class="fas fa-home"></i> Home
                </a>
            </li>
            <li class="breadcrumb-item active" aria-current="page">
                Products
            </li>
        </ol>
    </nav>
<div class="container mt-4">

    <div class="row">
        <!-- Filters Sidebar -->
        <div class="col-md-3">
            @await Html.PartialAsync("_ProductFilters", Model)
        </div>

        <!-- Main Content -->
        <div class="col-md-9">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Products</h2>
                <div class="d-flex">
                    <form asp-action="Index" method="get" id="search-form" class="mr-2">
                        <input type="hidden" name="categoryId" value="@Model.SelectedCategoryId" />
                        <input type="hidden" name="sortOrder" value="@Model.SortOrder" />
                        <input type="hidden" name="minPrice" value="@Model.MinPrice" />
                        <input type="hidden" name="maxPrice" value="@Model.MaxPrice" />
                        <div class="input-group">
                            <input type="text" class="form-control" name="searchTerm"
                                   value="@Model.SearchTerm" placeholder="Search..."
                                   id="search-input" autocomplete="off" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="submit">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                    @await Html.PartialAsync("_ProductSort", Model)
                </div>
            </div>

            @if (Model.Products.Any())
            {
                <div class="row">
                    @foreach (var product in Model.Products)
                    {
                        <div class="col-md-4 mb-4">
                            @await Html.PartialAsync("_ProductCard", product)
                        </div>
                    }
                </div>

                @await Html.PartialAsync("_Pagination", Model)
            }
            else
            {
                <div class="alert alert-info">
                    No products found matching your criteria.
                </div>
            }
        </div>
        <!-- Quick View Modal -->
        <div class="modal fade" id="quickViewModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Product Quick View</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Content will be loaded via AJAX -->
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function() {
         
          
             // Quick view modal
            document.querySelectorAll('.quick-view-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const productId = this.getAttribute('data-product-id');
                    const quickViewModal = new bootstrap.Modal(document.getElementById('quickViewModal'));

                    fetch(`/Products/QuickView/${productId}`)
                        .then(response => response.text())
                        .then(html => {
                            document.querySelector('#quickViewModal .modal-body').innerHTML = html;
                            quickViewModal.show();
                        });
                });
            });
            // Real-time search with debounce
            var searchTimeout;
            $('#search-input').on('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function() {
                    if ($('#search-input').val().trim().length >= 2 ||
                        $('#search-input').val().trim().length === 0) {
                        $("#search-form").submit();
                    }
                }, 500); // 500ms debounce delay
            });

            // Handle Enter key press
            $('#search-input').on('keypress', function(e) {
                if (e.which === 13) { // Enter key
                    e.preventDefault();
                    $("#search-form").submit();
                }
            });

          
        });
    </script>
}